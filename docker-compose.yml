# Docker Compose for QSFL-CAAD Development Environment
version: '3.8'

services:
  # Main QSFL-CAAD Application
  qsfl-caad:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: qsfl-caad-app
    ports:
      - "5000:5000"  # Dashboard
      - "8000:8000"  # API
    volumes:
      - .:/app
      - qsfl_data:/app/data
      - qsfl_logs:/app/logs
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://qsfl:qsfl123@postgres:5432/qsfl_caad
      - PYTHONPATH=/app
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - qsfl-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: qsfl-caad-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass qsfl123
    networks:
      - qsfl-network
    restart: unless-stopped

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: qsfl-caad-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=qsfl_caad
      - POSTGRES_USER=qsfl
      - POSTGRES_PASSWORD=qsfl123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - qsfl-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: qsfl-caad-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qsfl-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: qsfl-caad-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=qsfl123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - qsfl-network
    restart: unless-stopped

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: qsfl-caad-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - qsfl-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: qsfl-caad-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - qsfl-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: qsfl-caad-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - qsfl-caad
      - grafana
      - kibana
    networks:
      - qsfl-network
    restart: unless-stopped

  # Jupyter notebook for development and analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: qsfl-caad-jupyter
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - jupyter_data:/home/jovyan/work
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=qsfl123
    networks:
      - qsfl-network
    restart: unless-stopped

  # MinIO for object storage (model artifacts, datasets)
  minio:
    image: minio/minio:latest
    container_name: qsfl-caad-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=qsfl
      - MINIO_ROOT_PASSWORD=qsfl123456
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - qsfl-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: qsfl-caad-celery
    command: celery -A qsfl_caad.celery worker --loglevel=info
    volumes:
      - .:/app
      - qsfl_data:/app/data
      - qsfl_logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://qsfl:qsfl123@postgres:5432/qsfl_caad
      - PYTHONPATH=/app
    depends_on:
      - redis
      - postgres
    networks:
      - qsfl-network
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: qsfl-caad-celery-beat
    command: celery -A qsfl_caad.celery beat --loglevel=info
    volumes:
      - .:/app
      - qsfl_data:/app/data
      - qsfl_logs:/app/logs
    environment:
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://qsfl:qsfl123@postgres:5432/qsfl_caad
      - PYTHONPATH=/app
    depends_on:
      - redis
      - postgres
    networks:
      - qsfl-network
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: qsfl-caad-flower
    command: celery -A qsfl_caad.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    depends_on:
      - redis
      - celery-worker
    networks:
      - qsfl-network
    restart: unless-stopped

networks:
  qsfl-network:
    driver: bridge

volumes:
  qsfl_data:
    driver: local
  qsfl_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  jupyter_data:
    driver: local
  minio_data:
    driver: local