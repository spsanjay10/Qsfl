[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qsfl-caad"
version = "1.0.0"
description = "Quantum-Safe Federated Learning with Comprehensive Anomaly and Attack Detection"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "federated-learning",
    "quantum-safe",
    "anomaly-detection",
    "post-quantum-cryptography",
    "machine-learning",
    "security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scikit-learn>=1.0.0",
    "cryptography>=41.0.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "structlog>=22.0.0"
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.82.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]
ui = [
    "flask>=2.3.0",
    "flask-socketio>=5.3.0",
    "plotly>=5.15.0",
    "dash>=2.11.0"
]
all = [
    "qsfl-caad[dev,test,docs,ui]"
]

[project.urls]
Homepage = "https://github.com/yourusername/qsfl-caad"
Documentation = "https://qsfl-caad.readthedocs.io/"
Repository = "https://github.com/yourusername/qsfl-caad.git"
Issues = "https://github.com/yourusername/qsfl-caad/issues"
Changelog = "https://github.com/yourusername/qsfl-caad/blob/main/CHANGELOG.md"

[project.scripts]
qsfl-caad = "qsfl_caad.cli:main"
qsfl-dashboard = "ui.working_dashboard:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["qsfl_caad*", "ui*", "anomaly_detection*", "auth*", "federated_learning*", "monitoring*", "pq_security*"]
exclude = ["tests*", "docs*", "scripts*"]

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=qsfl_caad",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage Configuration
[tool.coverage.run]
source = ["qsfl_caad"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Bandit Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Commitizen Configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "qsfl_caad/__init__.py:__version__"
]